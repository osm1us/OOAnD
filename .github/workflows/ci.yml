name: CI for Checkstyle and Test coverage

on:
  pull_request:

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          
      - name: Checkstyle
        run: dotnet format --verify-no-changes

      - name: Restore dependencies
        run: dotnet restore

      - name: Check Project Structure
        run: |
          lib_project=$(find . -name "*.Lib.csproj")
          if [ -z "$lib_project" ]; then
            echo "❌ Error: No .Lib project found!"
            exit 1
          fi

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: |
          test_projects=$(find . -name "*.Tests.csproj")
          if [ -z "$test_projects" ]; then
            echo "❌ Warning: No test projects found!"
            exit 1
          fi
          for proj in $(find . -name "*.Tests.csproj"); do
            dotnet test "$proj" --verbosity normal --collect:"XPlat Code Coverage;Exclude=[*]AutoGeneratedProgram" --logger trx --results-directory coverage -- --parallel
          done

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Detailed Coverage Report
        run: |
          reportgenerator "-reports:coverage/*/coverage.cobertura.xml" "-targetdir:coveragereport" "-reporttypes:TextSummary;Cobertura"

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/*/coverage.cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'
          indicators: true

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Find Uncovered Lines
        run: |
          echo "### Uncovered Lines Details"
          echo "Analyzing coverage report..."
          if [ "${{ github.actor }}" != "zaryanezrya" ] && [ "${{ github.actor }}" != "etyumentcev" ]; then
            echo -e "\n\n\nWith love to everyone enjoying or suffering OOAnD\n\n\n - goldenreaper, HoneyMafia"
          fi

      - name: Show Coverage Details
        run: |
          echo "### 📊 Coverage Details by Class" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          lib_dir=$(find . -type d -name "*.Lib" | head -n 1)
          if [ -z "$lib_dir" ]; then
            echo "❌ Error: No .Lib directory found!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          coverage_file=$(find coverage -name "coverage.cobertura.xml" | head -n 1)
          if [ -z "$coverage_file" ]; then
            echo "❌ Error: Coverage report not found!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          while IFS= read -r class_info; do
            if [[ $class_info =~ name=\"([^\"]+)\".*filename=\"([^\"]+)\".*line-rate=\"([^\"]+)\".*branch-rate=\"([^\"]+)\" ]]; then
              class_name="${BASH_REMATCH[1]}"
              file_name="${BASH_REMATCH[2]}"
              line_rate=$(awk "BEGIN {print ${BASH_REMATCH[3]}*100}")
              branch_rate=$(awk "BEGIN {print ${BASH_REMATCH[4]}*100}")
              
              if (( $(echo "$line_rate == 100" | bc -l) )); then
                emoji="✅"
              elif (( $(echo "$line_rate >= 75" | bc -l) )); then
                emoji="⚠️"
              else
                emoji="❌"
              fi
              
              echo "#### $emoji ${class_name##*.}" >> $GITHUB_STEP_SUMMARY
              echo "- 📄 File: \`$file_name\`" >> $GITHUB_STEP_SUMMARY
              echo "- 📏 Line Coverage: ${line_rate}%" >> $GITHUB_STEP_SUMMARY
              echo "- 🔀 Branch Coverage: ${branch_rate}%" >> $GITHUB_STEP_SUMMARY
              
              if (( $(echo "$line_rate < 100" | bc -l) )); then
                echo "⚠️ **Uncovered Lines:**" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`csharp" >> $GITHUB_STEP_SUMMARY
                
                actual_file=""
                
                if [ -f "$lib_dir/$file_name" ]; then
                  actual_file="$lib_dir/$file_name"
                else
                  found_file=$(find "$lib_dir" -name "$file_name" -not -path "*/obj/*" -not -path "*/bin/*" -type f | head -n 1)
                  if [ ! -z "$found_file" ]; then
                    actual_file="$found_file"
                  else
                    found_file=$(find "$lib_dir" -iname "$file_name" -not -path "*/obj/*" -not -path "*/bin/*" -type f | head -n 1)
                    if [ ! -z "$found_file" ]; then
                      actual_file="$found_file"
                    fi
                  fi
                fi
                if [ ! -z "$actual_file" ]; then
                  class_start=$(grep -n "<class.*$file_name.*>" "$coverage_file" | cut -d: -f1)
                  class_end=$(tail -n +$class_start "$coverage_file" | grep -n "</class>" | head -n 1 | cut -d: -f1)
                  class_end=$((class_start + class_end - 1))
                  
                  sed -n "${class_start},${class_end}p" "$coverage_file" > class_info.xml
                  
                  declare -A seen_lines
                  
                  grep -o '<line[^>]*>' class_info.xml | \
                  while read -r line; do
                    if [[ $line =~ number=\"([0-9]+)\".*hits=\"0\" ]]; then
                      line_num=${BASH_REMATCH[1]}
                      if [ -z "${seen_lines[$line_num]}" ]; then
                        line_content=$(sed -n "${line_num}p" "$actual_file")
                        if [ ! -z "$line_content" ]; then
                          line_content=$(echo "$line_content" | sed -e 's/^[[:space:]]*//')
                          echo "Line $line_num: $line_content" >> $GITHUB_STEP_SUMMARY
                          seen_lines[$line_num]=1
                        fi
                      fi
                    fi
                  done
                  
                  unset seen_lines
                  rm class_info.xml
                else
                  echo "⚠️ File not found in $lib_dir: $file_name" >> $GITHUB_STEP_SUMMARY
                  echo "Please ensure the file exists and is in the correct location." >> $GITHUB_STEP_SUMMARY
                fi
                
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done < <(grep "<class.*name=" "$coverage_file")

      - name: Write to Job Summary
        run: |
          echo "## 📈 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Coverage Summary" >> $GITHUB_STEP_SUMMARY
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
